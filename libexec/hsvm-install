#!/usr/bin/env bash
# Summary: Install a GHC, and maybe cabal-install.
# Usage: hsvm install ghc-version [--32-bit|-3|--64-bit|-6] [-v|--verbose]

set -e
[ -n "$HSVM_DEBUG" ] && set -x
source "$HSVM_LIB/_hsvm-functions"

arch="x86_64"
VERBOSE=0
ARGS="$@"

while [ "$#" -gt 0 ]; do
  case "$1" in
    --32-bit|-3) arch="i386" ;;
    --64-bit|-6) arch="x86_64" ;;
    --verbose|-v) VERBOSE=1 ;;
    -j) shift ;;
    -j*) ;;
    *) version="$1" ;;
  esac
  shift
done

if [ -z "$version" ]; then
  echo "usage: hsvm install ghc-version [--32-bit|-3|--64-bit|-6] [-q|--quiet]" >&2
  exit 1
fi

if [ "$version" = "HEAD" ]; then
  hsvm build-head $ARGS
  exit 0
fi

filename="ghc-${version}-${arch}-${HSVM_OS}.tar.bz2"
url="http://www.haskell.org/ghc/dist/${version}/${filename}"

find_url() {
  if [ "$(curl -I --silent --write-out "%{http_code}" "$url" 2>/dev/null | tail -1)" = "200" ]; then
    echo "$url"
  fi
}

cache_file() {
  cachepath="$HSVM_ROOT/cache/tarballs"
  if [ ! -d "$cachepath" ]; then
    mkdir -p "$cachepath"
  fi
  if [ ! -f "$cachepath/$filename" ]; then
    u="$(find_url)"
    if [ -z "$u" ]; then
      echo "hsvm: no ghc version for ${version}-${arch}-${HSVM_OS}" >&2
      exit 1
    else
      quietly curl "$u" --output "$cachepath/$filename"
    fi
  fi
}

install() {
  cache_file
  binary="${HSVM_ROOT}/cache/tarballs/$filename"
  unpack_dir="$(mktemp -d /tmp/ghc-XXXXXX)"
  install_dir="${GHCS_PATH}/${version}-${arch}"

  mkdir -p "$install_dir"

  trap "rm -rf '$install_dir'" INT

  quietly tar xjf "$binary" -C "$unpack_dir" --strip-components 1

  OLDPWD="$(pwd)"

  cd "$unpack_dir"
  quietly ./configure "--prefix=$install_dir"
  quietly make install

  cd "$OLDPWD"

  rm -rf "$unpack_dir"
}

install

hsvm use "${version}-${arch}"
